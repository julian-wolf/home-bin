#! /usr/bin/env python

# This script is basically mktorrent, but with a few options that I
# find myself regularly using coded in as defaults to save a little
# time here and there.
# It mostly just sets the source flag using bencode in order to
# save me from having to build mktorrent from its HEAD just for the
# source option, since I like sticking to what's available through
# Homebrew when possible.

from __future__ import print_function

import os
from sys import exit as sys_exit
import argparse
import bencode
from subprocess import check_output, CalledProcessError

mktorrent = "/usr/local/bin/mktorrent"

def make_pth_torrent(infile, outfile, announce, source):
    if os.path.isdir(outfile):
        outfile += infile.split("/")[-1]

    if not outfile.endswith(".torrent"):
        outfile += ".torrent"

    for root, _, files in os.walk(infile):
        osx_system_files = (name for name in files if name == ".DS_Store")
        for name in osx_system_files:
            filename = os.path.join(root, name)
            os.remove(filename)

    mktorrent_command = "%s -p -a '%s' -o '%s' '%s' 2>&1" % (
            mktorrent, announce_url, outfile, infile)

    try:
        print(check_output(mktorrent_command, shell=True))
    except CalledProcessError as e:
        sys_exit(e.output)

    with open(outfile, "rb") as fout:
        data = bencode.bdecode(fout.read())

    # get around not wanting to build mktorrent from its HEAD for -s
    data["info"]["source"] = source

    with open(outfile, "wb") as fout:
        fout.write(bencode.bencode(data))


if __name__ == "__main__":
    desktop = "/Users/julian/Desktop/"
    source_string = "PTH"
    announce_file = "/Volumes/Data HDD/PassTheHeadphones/.announce.txt"

    with open(announce_file, "rt") as af:
        announce_url = af.read().strip()

    parser = argparse.ArgumentParser(description=("Make a .torrent file for "
                                                  "uploading to PTH."))
    parser.add_argument("infile",           help="Thing to make into a torrent.")
    parser.add_argument("--outfile",  "-o", help="Output .torrent file.",
                        required=False, default=desktop)
    parser.add_argument("--source",   "-s", help="Source string.",
                        required=False, default=source_string)
    parser.add_argument("--announce", "-a", help="Announce url.",
                        required=False, default=announce_url)
    args = parser.parse_args()
    make_pth_torrent(args.infile, args.outfile, args.announce, args.source)
